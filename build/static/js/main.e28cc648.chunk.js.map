{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Home.js","Study.js","CreateDeck.js","Deck.js","EditDeck.js","AddCard.js","EditCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","Home","useState","decks","setDecks","history","useHistory","window","confirm","abortController","AbortController","go","useEffect","log","abort","fetchData","to","map","length","description","type","onClick","handleDelete","Study","useParams","setDeck","setCard","front","setFront","cardNumber","setCardNumber","flipCard","showNextBtn","index","cardsTotal","push","nextCard","notEnoughCards","fetchDeck","find","back","enoughCards","CreateDeck","newDeck","setNewDeck","event","preventDefault","handleChange","target","value","onSubmit","handleSubmit","htmlFor","placeholder","onChange","Deck","setCards","handleEditDeck","handleStudy","handleAddCard","handleDeleteDeck","handleEditCard","handleDeleteCard","EditDeck","handleCancel","AddCard","setup","newCard","setNewCard","handleDone","EditCard","deckResponse","cardResponse","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e28cc648.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { deleteDeck, listDecks } from \"./utils/api/index\";\r\n\r\nfunction Home() {\r\n    const [decks, setDecks] = useState([]);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const abortController = new AbortController();\r\n            try {\r\n                const response = await listDecks(abortController.signal);\r\n                setDecks(response);\r\n            } catch (error) {\r\n                console.log(error, \"Error\");\r\n            }\r\n            return () => abortController.abort();\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    async function handleDelete(deck) {\r\n        if (\r\n            window.confirm(\r\n                `Delete this deck?  \r\n                \r\nYou will not be able to recover it.`\r\n            )\r\n        ) {\r\n            const abortController = new AbortController();\r\n            history.go(\"/\");\r\n            return await deleteDeck(deck.id, abortController.signal); //check if signal needed\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Link className=\"btn btn-secondary mb-2\" to=\"decks/new\">\r\n                + Creacte Deck\r\n            </Link>\r\n            <div className=\"card-deck\">\r\n                {decks.map((deck) => {\r\n                    return (\r\n                        <div key={deck.id}>\r\n                            <article className=\"card m-1\" key={deck.id}>\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"card-title mb-2\">\r\n                                        {deck.name}\r\n                                    </div>\r\n                                    <div className=\"card-subtitle mb-2 text-muted\">\r\n                                        {deck.cards.length} cards\r\n                                    </div>\r\n                                    <div className=\"card-text mb-2\">\r\n                                        {deck.description}\r\n                                    </div>\r\n                                    <Link\r\n                                        className=\"btn btn-secondary mr-2\"\r\n                                        to={`/decks/${deck.id}`}\r\n                                    >\r\n                                        View\r\n                                    </Link>\r\n                                    <Link\r\n                                        className=\"btn btn-primary mr-2\"\r\n                                        to={`/decks/${deck.id}/study`}\r\n                                    >\r\n                                        Study\r\n                                    </Link>\r\n                                    <button\r\n                                        className=\"btn btn-danger\"\r\n                                        type=\"button\"\r\n                                        onClick={() => handleDelete(deck)}\r\n                                    >\r\n                                        Delete\r\n                                    </button>\r\n                                </div>\r\n                            </article>\r\n                        </div>\r\n                    ); //TODO: HOW TO REPLACE THE WORD \"DELETE\" WITH A BIN?\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { readDeck } from \"./utils/api/index\";\r\nimport { useHistory, Link, useParams } from \"react-router-dom\";\r\n\r\nfunction Study() {\r\n    const { deckId } = useParams();\r\n    const history = useHistory();\r\n    //The path to this screen should include the deckId (i.e., /decks/:deckId/study).\r\n\r\n    const [deck, setDeck] = useState({});\r\n    const [cards, setCard] = useState([]);\r\n    const [front, setFront] = useState(true);\r\n    const [cardNumber, setCardNumber] = useState(1);\r\n\r\n    useEffect(() => {\r\n        async function fetchDeck() {\r\n            const abortController = new AbortController();\r\n            const response = await readDeck(deckId, abortController.signal);\r\n            setDeck(response);\r\n            setCard(response.cards);\r\n            return () => {\r\n                abortController.abort();\r\n            };\r\n        } //if deckid ? fetchDeck\r\n        if (deckId) fetchDeck();\r\n    }, [deckId]);\r\n\r\n    function nextCard(index, cardsTotal) {\r\n        if (index < cardsTotal) {\r\n            setCardNumber(cardNumber + 1);\r\n            setFront(true);\r\n        } else {\r\n            if (\r\n                window.confirm(\r\n                    `Restart cards? Click 'cancel' to return to the home page.`\r\n                )\r\n            ) {\r\n                setCardNumber(1);\r\n                setFront(true);\r\n            } else {\r\n                history.push(\"/\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function flipCard() {\r\n        if (front) {\r\n            setFront(false);\r\n        } else {\r\n            setFront(true);\r\n        }\r\n    }\r\n\r\n    function showNextBtn(cards, index) {\r\n        if (front) {\r\n            return null;\r\n        } else {\r\n            return (\r\n                <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => nextCard(index + 1, cards.length)}\r\n                >\r\n                    Next\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n\r\n    function enoughCards() {\r\n        const card = cards.find((card, index) => index === cardNumber - 1);\r\n        // const index = cards.findIndex(\r\n        //     (card, index) => index === cardNumber - 1\r\n        // );\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\" key={card.id}>\r\n                    <div className=\"card-title\">\r\n                        {`Card ${cardNumber} of ${cards.length}`}\r\n                    </div>\r\n                    <div className=\"card-text mb-3\">\r\n                        {front ? card.front : card.back}\r\n                    </div>\r\n                    <button\r\n                        className=\"btn btn-secondary mr-2\"\r\n                        onClick={flipCard}\r\n                    >\r\n                        Flip\r\n                    </button>\r\n                    {/* {showNextBtn(cards, index)} */}\r\n                    {showNextBtn(cards, cardNumber - 1)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function notEnoughCards() {\r\n        return (\r\n            <div>\r\n                <h2>Not enough cards.</h2>\r\n                <p>\r\n                    You need at least 3 cards to study. There are {cards.length}{\" \"}\r\n                    cards in this deck.\r\n                </p>\r\n                <Link\r\n                    to={`/decks/${deck.id}/cards/new`}\r\n                    className=\"btn btn-primary\"\r\n                >\r\n                    Add Cards\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">Study</li>\r\n            </ol>\r\n            <h2>{deck.name}: Study</h2>\r\n            <div>\r\n                {cards.length === 0\r\n                    ? notEnoughCards()\r\n                    : cards.length > 2\r\n                    ? enoughCards()\r\n                    : notEnoughCards()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Study;\r\n","import React, { useState } from \"react\";\r\nimport { createDeck } from \"./utils/api/index\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\n\r\nfunction CreateDeck() {\r\n    const history = useHistory();\r\n    const deckSetup = {\r\n        name: \"\",\r\n        description: \"\",\r\n    };\r\n    const [newDeck, setNewDeck] = useState(deckSetup);\r\n\r\n    async function handleSubmit(event) {\r\n        // console.log(event.target);\r\n        //THE SUBMIT BUTTON SHOULD LEAD TO DECK SCREEN, NOT HOME DONE\r\n        event.preventDefault();\r\n        const abortController = new AbortController();\r\n        const response = await createDeck(\r\n            { ...newDeck },\r\n            abortController.signal\r\n        );\r\n        // console.log(\"here\", response.id);\r\n        history.push(`/decks/${response.id}`);\r\n        // history.push(\"/\");\r\n        return response;\r\n    }\r\n\r\n    function handleChange({ target }) {\r\n        setNewDeck({\r\n            ...newDeck,\r\n            [target.name]: target.value,\r\n        });\r\n    }\r\n\r\n    function handleCancelButton() {\r\n        history.push(\"/\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">Create Deck</li>\r\n            </ol>\r\n            <form onSubmit={(event) => handleSubmit(event)}>\r\n                <h1>Create Deck</h1>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input\r\n                        id=\"name\"\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        placeholder=\"Deck Name\"\r\n                        value={newDeck.name}\r\n                        onChange={handleChange}\r\n                        className=\"form-control\"\r\n                    ></input>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"description\">Description</label>\r\n                    <textarea\r\n                        id=\"description\"\r\n                        name=\"description\"\r\n                        type=\"textarea\"\r\n                        placeholder=\"Brief description of the deck\"\r\n                        value={newDeck.description}\r\n                        onChange={handleChange}\r\n                        className=\"form-control\"\r\n                    ></textarea>\r\n                </div>\r\n                <button\r\n                    className=\"btn btn-secondary mr-2\"\r\n                    onClick={() => handleCancelButton()}\r\n                >\r\n                    Cancel\r\n                </button>\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                    Submit\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateDeck;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { readDeck, deleteDeck, deleteCard } from \"./utils/api/index\";\r\n\r\nfunction Deck() {\r\n    const history = useHistory();\r\n    const { deckId } = useParams();\r\n\r\n    const [deck, setDeck] = useState({});\r\n    const [cards, setCards] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const abortController = new AbortController();\r\n            try {\r\n                const response = await readDeck(deckId, abortController.signal);\r\n                setDeck(response);\r\n                setCards(response.cards);\r\n            } catch (error) {\r\n                console.error(\"Something went wrong\", error);\r\n            }\r\n            return () => {\r\n                abortController.abort();\r\n            };\r\n        }\r\n        fetchData();\r\n    }, [deckId]);\r\n\r\n    async function handleEditDeck() {\r\n        history.push(`/decks/${deckId}/edit`);\r\n    }\r\n\r\n    async function handleStudy() {\r\n        history.push(`/decks/${deckId}/study`);\r\n    }\r\n\r\n    async function handleAddCard() {\r\n        history.push(`/decks/${deckId}/cards/new`);\r\n    }\r\n\r\n    async function handleEditCard(card) {\r\n        history.push(`/decks/${deckId}/cards/${card.id}/edit`);\r\n    }\r\n\r\n    async function handleDeleteCard(card) {\r\n        if (\r\n            window.confirm(\r\n                `Delete this card? You will not be able to recover it`\r\n            )\r\n        ) {\r\n            const abortController = new AbortController();\r\n            try {\r\n                history.go(\"/\");\r\n                return await deleteCard(card.id, abortController.signal);\r\n            } catch (error) {\r\n                console.error(\"Something went wrong\", error);\r\n            }\r\n            return () => {\r\n                abortController.abort();\r\n            };\r\n        }\r\n    }\r\n\r\n    async function handleDeleteDeck(deck) {\r\n        if (\r\n            window.confirm(\r\n                `Delete this deck? You will not be able to recover it`\r\n            )\r\n        ) {\r\n            const abortController = new AbortController();\r\n            try {\r\n                history.push(\"/\");\r\n                return await deleteDeck(deck.id, abortController.signal);\r\n            } catch (error) {\r\n                console.error(\"Something went wrong\", error);\r\n            }\r\n            return () => {\r\n                abortController.abort();\r\n            };\r\n        }\r\n    }\r\n\r\n    // if (cards.length > 0) {\r\n    return (\r\n        <div>\r\n            <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">{deck.name}</li>\r\n            </ol>\r\n            <div>\r\n                <div className=\"mb-3\">\r\n                    <h3>{deck.name}</h3>\r\n                    <p>{deck.description}</p>\r\n                    <button\r\n                        onClick={() => handleEditDeck()}\r\n                        className=\"btn btn-secondary mr-1\"\r\n                    >\r\n                        Edit\r\n                    </button>\r\n                    <button\r\n                        onClick={() => handleStudy()}\r\n                        className=\"btn btn-primary mx-1\"\r\n                    >\r\n                        Study\r\n                    </button>\r\n                    <button\r\n                        onClick={() => handleAddCard()}\r\n                        className=\"btn btn-primary mx-1\"\r\n                    >\r\n                        Add Cards\r\n                    </button>\r\n                    <button\r\n                        onClick={() => handleDeleteDeck(deck)}\r\n                        className=\"btn btn-danger mx-1\"\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <h2>Cards</h2>\r\n            {cards.map((card) => {\r\n                return (\r\n                    <div className=\"card-deck mb-2\" key={card.id}>\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <div className=\"row mb-2\">\r\n                                    <div className=\"col\">{card.front}</div>\r\n                                    <div className=\"col\">{card.back}</div>\r\n                                </div>\r\n                                <div className=\"container row\">\r\n                                    <button\r\n                                        onClick={() => handleEditCard(card)}\r\n                                        className=\"btn btn-secondary mr-2\"\r\n                                    >\r\n                                        Edit\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={() => handleDeleteCard(card)}\r\n                                        className=\"btn btn-danger\"\r\n                                    >\r\n                                        Delete\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Deck;\r\n\r\n//Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo ullam, omnis sapiente amet unde corrupti, cumque possimus quae eius eligendi quasi consectetur nisi, harum temporibus iusto? Labore et at illum.\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { readDeck, updateDeck } from \"./utils/api/index\";\r\n\r\nfunction EditDeck() {\r\n    const history = useHistory();\r\n    const { deckId } = useParams();\r\n\r\n    const DeckSetup = {\r\n        id: \"\",\r\n        name: \"\",\r\n        description: \"\",\r\n    };\r\n    const [deck, setDeck] = useState(DeckSetup);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const abortController = new AbortController();\r\n            try {\r\n                const response = await readDeck(deckId, abortController.signal);\r\n                setDeck(response);\r\n            } catch (error) {\r\n                console.error(\"Error\", error); //change\r\n            }\r\n            return () => {\r\n                abortController.abort();\r\n            };\r\n        }\r\n        fetchData();\r\n    }, [deckId]);\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        const abortController = new AbortController();\r\n        const response = await updateDeck({ ...deck }, abortController.signal);\r\n        history.push(`/decks/${deckId}`);\r\n        return response;\r\n    }\r\n\r\n    function handleChange({ target }) {\r\n        setDeck({\r\n            ...deck,\r\n            [target.name]: target.value,\r\n        });\r\n    }\r\n\r\n    async function handleCancel() {\r\n        history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">Edit Deck</li>\r\n            </ol>\r\n            <form onSubmit={handleSubmit}>\r\n                <h1>Edit Deck</h1>\r\n                <div className=\"form-group\">\r\n                    <label>Name</label>\r\n                    <input\r\n                        id=\"name\"\r\n                        name=\"name\"\r\n                        className=\"form-control\"\r\n                        onChange={handleChange}\r\n                        type=\"text\"\r\n                        value={deck.name}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Description</label>\r\n                    <textarea\r\n                        id=\"description\"\r\n                        name=\"description\"\r\n                        className=\"form-control\"\r\n                        onChange={handleChange}\r\n                        type=\"textarea\"\r\n                        value={deck.description}\r\n                    />\r\n                </div>\r\n                <button\r\n                    className=\"btn btn-secondary mr-2\"\r\n                    onClick={() => handleCancel()}\r\n                >\r\n                    Cancel\r\n                </button>\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                    Submit\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditDeck;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { createCard, readDeck } from \"./utils/api/index\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\n\r\nfunction AddCard() {\r\n    const { deckId } = useParams();\r\n    const history = useHistory();\r\n\r\n    const setup = {\r\n        front: \"\",\r\n        back: \"\",\r\n    };\r\n\r\n    const [newCard, setNewCard] = useState(setup);\r\n    const [deck, setDeck] = useState({});\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const abortController = new AbortController();\r\n            try {\r\n                const response = await readDeck(deckId, abortController.signal);\r\n                setDeck(response);\r\n            } catch (error) {\r\n                console.error(\"Something went wrong\", error);\r\n            }\r\n            return () => {\r\n                abortController.abort();\r\n            };\r\n        }\r\n        fetchData();\r\n    }, [deckId]);\r\n\r\n    function handleChange({ target }) {\r\n        setNewCard({\r\n            ...newCard,\r\n            [target.name]: target.value,\r\n        });\r\n    }\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        const abortController = new AbortController();\r\n        const response = await createCard(\r\n            deckId,\r\n            { ...newCard },\r\n            abortController.signal\r\n        );\r\n        history.go(\"/\");\r\n        setNewCard(setup);\r\n        return response;\r\n    }\r\n\r\n    async function handleDone() {\r\n        history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\">Add Card</li>\r\n            </ol>\r\n            <form onSubmit={handleSubmit}>\r\n                <h2>{deck.name}: Add Card</h2>\r\n                <div className=\"form-group\">\r\n                    <label>Front</label>\r\n                    <textarea\r\n                        id=\"front\"\r\n                        name=\"front\"\r\n                        className=\"form-control\"\r\n                        onChange={handleChange}\r\n                        type=\"textarea\"\r\n                        placeholder=\"Front side of card\"\r\n                        value={newCard.front}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Back</label>\r\n                    <textarea\r\n                        id=\"back\"\r\n                        name=\"back\"\r\n                        className=\"form-control\"\r\n                        onChange={handleChange}\r\n                        type=\"textarea\"\r\n                        placeholder=\"Back side of card\"\r\n                        value={newCard.back}\r\n                    />\r\n                </div>\r\n                <button\r\n                    className=\"btn btn-secondary mr-2\"\r\n                    onClick={() => handleDone()}\r\n                >\r\n                    Done\r\n                </button>\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { readCard, readDeck, updateCard } from \"./utils/api/index\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\n\r\nfunction EditCard() {\r\n    const { deckId, cardId } = useParams();\r\n    const history = useHistory();\r\n\r\n    const deckSetup = {\r\n        id: \"\",\r\n        name: \"\",\r\n        description: \"\",\r\n    };\r\n    const cardSetup = {\r\n        id: \"\",\r\n        front: \"\",\r\n        back: \"\",\r\n        deckId: \"\",\r\n    };\r\n\r\n    const [card, setCard] = useState(deckSetup);\r\n    const [deck, setDeck] = useState(cardSetup);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const abortController = new AbortController();\r\n            try {\r\n                const deckResponse = await readDeck(\r\n                    deckId,\r\n                    abortController.signal\r\n                );\r\n                const cardResponse = await readCard(\r\n                    cardId,\r\n                    abortController.signal\r\n                );\r\n                setCard(cardResponse);\r\n                setDeck(deckResponse);\r\n            } catch (error) {\r\n                console.error(\"Error\", error);\r\n            }\r\n            return () => {\r\n                abortController.abort();\r\n            };\r\n        }\r\n        fetchData();\r\n    }, [deckId, cardId]);\r\n\r\n    function handleChange({ target }) {\r\n        setCard({\r\n            ...card,\r\n            [target.name]: target.value,\r\n        });\r\n    }\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        const abortController = new AbortController();\r\n        const response = await updateCard({ ...card }, abortController.signal);\r\n        history.push(`/decks/${deckId}`);\r\n        return response;\r\n    }\r\n\r\n    async function handleCancel() {\r\n        history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\">Edit Card {cardId}</li>\r\n            </ol>\r\n            <form onSubmit={handleSubmit}>\r\n                <h2>Edit Card</h2>\r\n                <div className=\"form-group\">\r\n                    <label>Front</label>\r\n                    <textarea\r\n                        id=\"front\"\r\n                        name=\"front\"\r\n                        className=\"form-control\"\r\n                        onChange={handleChange}\r\n                        type=\"textarea\"\r\n                        value={card.front}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Back</label>\r\n                    <textarea\r\n                        id=\"back\"\r\n                        name=\"back\"\r\n                        className=\"form-control\"\r\n                        onChange={handleChange}\r\n                        type=\"textarea\"\r\n                        value={card.back}\r\n                    />\r\n                </div>\r\n                <button\r\n                    className=\"btn btn-secondary mr-2\"\r\n                    onClick={() => handleCancel()}\r\n                >\r\n                    Cancel\r\n                </button>\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditCard;\r\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"../Home\";\nimport Study from \"../Study\";\nimport CreateDeck from \"../CreateDeck\";\nimport Deck from \"../Deck\";\nimport EditDeck from \"../EditDeck\";\nimport AddCard from \"../AddCard\";\nimport EditCard from \"../EditCard\";\n\nfunction Layout() {\n    return (\n        <>\n            <Header />\n            <div className=\"container\">\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home></Home>\n                    </Route>\n                    <Route path=\"/decks/:deckId/study\">\n                        <Study></Study>\n                    </Route>\n                    <Route path=\"/decks/new\">\n                        <CreateDeck></CreateDeck>\n                    </Route>\n                    <Route exact path=\"/decks/:deckId\" /*exact?*/>\n                        <Deck></Deck>\n                    </Route>\n                    <Route path=\"/decks/:deckId/edit\">\n                        <EditDeck></EditDeck>\n                    </Route>\n                    <Route path=\"/decks/:deckId/cards/new\">\n                        <AddCard></AddCard>\n                    </Route>\n                    <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n                        <EditCard></EditCard>\n                    </Route>\n                    <NotFound />\n                </Switch>\n            </div>\n        </>\n    );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n    return (\n        <div className=\"app-routes\">\n            <Switch>\n                <Route path=\"/\">\n                    <Layout />\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}